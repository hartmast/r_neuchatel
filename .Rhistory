pok <- read.delim("examples/Pokemon.csv")
pok
pok <- read.delim("examples/Pokemon.csv", quote = "")
pok
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color)
pok$Type
pok$Class
pok$Form
pok$Name_Form
pok$Form
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = pok$Form)
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
pok$Form
scatter.smooth(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
model_pok <- lm(pok$Weight_kg~pok$Height_m)
abline(model_pok)
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form),
xlab="Height", ylab="Weight")
model_pok <- lm(pok$Weight_kg~pok$Height_m)
abline(model_pok)
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form),
xlab="Height", ylab="Weight", main = "Height~Weight, Pokémon")
model_pok <- lm(pok$Weight_kg~pok$Height_m)
abline(model_pok)
pok$Height_m
# read data
pok <- read.delim("examples/Pokemon.csv", quote = "")
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form),
xlab="Height", ylab="Weight", main = "Height~Weight, Pokémon")
pok
# read data
pok <- read.csv("examples/Pokemon.csv")
# plot
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form),
xlab="Height", ylab="Weight", main = "Height~Weight, Pokémon")
model_pok <- lm(pok$Weight_kg~pok$Height_m)
abline(model_pok)
table(pok$Generazion_Picture)
table(pok$Generazion_Picture~pok$Class)
table(pok$Generazion_Picture, pok$Class)
prop.table(table(pok$Generazion_Picture, pok$Class), 2)
barplot(prop.table(table(pok$Generazion_Picture, pok$Class), 2))
plot(1:20, rep(10,20), pch = c(1:20), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n")
plot(1:20, rep(10,20), pch = c(1:20), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n",
ylim = c(5,15))
plot(1:20, rep(10,20), pch = c(1:20), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n",
ylim = c(9,11))
plot(1:20, rep(10,20), pch = c(1:20), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n",
ylim = c(9,11))
plot(1:20, rep(10,20), pch = c(1:20), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n",
ylim = c(10,10))
plot(1:20, rep(10,20), pch = c(1:20), ylim=c(0,10), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n")
plot(1:20, rep(10,20), pch = c(1:20), ylim=c(5, 15), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n")
plot(1:20, rep(10,20), pch = c(1:20), ylim=c(7, 15), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n")
plot(1:20, rep(10,20), pch = c(1:20), ylim=c(7, 16), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n")
plot(1:20, rep(10,20), pch = c(1:20), cex=1.5, ylab="", xlab="", yaxt="n", xaxt="n")
hw <- read.csv("examples/height_weight.csv")
plot(hw)
plot(hw$height, hw$weight)
table(height~weight)
table(hw$height~hw$weight)
hw$height
hw$weight
plot(hw$height, hw$weight,
xlab = "Height", ylab = "Weight", main = "Height~Weight")
lines(lowess(hw$weight~hw$height))
model_hw <- lm(hw$weight~hw$height)
abline(model_hw)
plot(hw$height, hw$weight,
xlab = "Height", ylab = "Weight", main = "Height~Weight")
model_hw <- lm(hw$weight~hw$height)
abline(model_hw)
plot(x, y, type = "b", lty = 2)
lines(c(2:5, c(4:7)))
plot(x, y, type = "b", lty = 2)
lines(c(2:5, c(4:7)), lty = 3)
plot(x, y, type = "b", lty = 2)
lines(x = c(2:5), y = c(4:7), lty = 3)
lines(x = c(2:7), y = c(4:10), lty = 3)
lines(x = c(2:7), y = c(4:9), lty = 3)
plot(x, y, type = "b", lty = 2)
lines(x = c(2:7), y = c(4:9), lty = 3)
lines(x = c(2:7), y = c(4:9), lty = 3, col = "darkgrey")
plot(hw$height, hw$weight,
xlab = "Height", ylab = "Weight", main = "Height~Weight")
model_hw <- lm(hw$weight~hw$height)
abline(model_hw, col = "darkgrey", lty = 2)
?layout
matrix(c(1,1,1,
2,2,2,
nrow = 2))
matrix(c(1,1,1,
2,2,2,
ncol = 2))
matrix(c(1,1,1,
2,2,2),
ncol = 2)
matrix(c(1,1,1,
2,2,2),
nrow = 2)
matrix(c(1,2,2,
1,2,2),
nrow = 2)
matrix(c(1,2,2,
1,2,2),
ncol = 2)
matrix(c(1,2,2,
1,2,2),
nrow = 2)
matrix(c(1,2,2,
1,2,2),
nrow = 2, byrow = T)
m <- matrix(c(1,2,2,
1,2,2),
nrow = 2, byrow = T)
plot(x = c(7,9,15,24), y = c(8,15, 40, 32), type = "l")
layout(m)
barplot(c(20, 40), names.arg = c("a", "b"))
plot(x = c(7,9,15,24), y = c(8,15, 40, 32), type = "l")
barplot(c(20, 40), names.arg = c("a", "b"))
plot(x = c(7,9,15,24), y = c(8,15, 40, 32), type = "l", ylab="y", xlab="x")
?layout
?png
myPNG <- function(x, mfrow = c(1,1), ...) {
if(mfrow!=c(1,1)) {
par(mfrow = mfrow)
}
png(width = 7, height = 7, un = "in", res =300, ...)
dev.off()
if(mfrow != c(1,1)) {
par(mfrow = c(1,1))
}
}
plot(c(1:3), c(1:3))
par(mfrow=c(1,1))
plot(c(1:3), c(1:3))
p1 <- plot(c(1:3), c(1:3))
p1
plot(x,y)
p1
p1
plot(c(1:3), c(1:3))
myPNG(plot(c(1:3), c(1:3)))
myPNG <- function(x, mfrow = c(1,1), ...) {
if(any(mfrow)!=1) {
par(mfrow = mfrow)
}
png(width = 7, height = 7, un = "in", res =300, ...)
dev.off()
if(any(mfrow)!=1) {
par(mfrow = c(1,1))
}
}
myPNG(plot(c(1:3), c(1:3)))
a = c(1,1)
any(a)!=1
?any
any(a!=1)
myPNG <- function(x, mfrow = c(1,1), ...) {
if(any(mfrow!=1)) {
par(mfrow = mfrow)
}
png(width = 7, height = 7, un = "in", res =300, ...)
dev.off()
if(any(mfrow!=1)) {
par(mfrow = c(1,1))
}
}
myPNG(plot(c(1:3), c(1:3)))
myPNG(plot(c(1:3), c(1:3)), filename = "bla.png")
myPNG <- function(x, mfrow = c(1,1), ...) {
if(any(mfrow!=1)) {
par(mfrow = mfrow)
}
png(width = 7, height = 7, un = "in", res =300, ...)
x
dev.off()
if(any(mfrow!=1)) {
par(mfrow = c(1,1))
}
}
myPNG(plot(c(1:3), c(1:3)), filename = "bla.png")
myPNG(plot(x,y),
plot(c(1:3), c(1:3)),
mfrow = c(1,2),
filename = "blubb.png")
list(plot(x,y), plot(x,y))
list(plot(x,y), plot(x,y))[[1]]
list(plot(x,y), plot(x,y))[[2]]
list(plot(x,y), plot(1:3))[[2]]
par(mfrow = c(1,2))
myPNG <- function(x, mfrow = c(1,1), ...) {
if(any(mfrow!=1)) {
par(mfrow = mfrow)
}
png(width = 7*mfrow[1], height = 7*mfrow[1], un = "in", res = 300, ...)
x
dev.off()
if(any(mfrow!=1)) {
par(mfrow = c(1,1))
}
}
myPNG(plot(c(1:3), c(1:3)), filename = "bla.png")
myPNG(list(plot(x,y),
plot(c(1:3), c(1:3))),
mfrow = c(1,2),
filename = "blubb.png")
a <- list(plot(x,y),
plot(c(1:3), c(1:3)))
a
plot(a)
a[[1]]
a[[2]]
plot(a[[2]])
a
plot(x,y)
a <- plot(x,)
a <- plot(x,y)
str(a)
eval("plot(c(1:3)")
eval("plot(c(1:3))")
parse("plot(c(1:3))")
?parse
parse("")
plot(1:3)
eval(parse(plot(1:3)))
par()$mfrow
myPNG <- function(...) {
mf <- par()$mfrow
png(width = 7*mf[1], height = 7*mf[1], un = "in", res = 300, ...)
}
myPNG("bla2.png")
plot(x,y)
dev.off()
plot(x,y)
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
par(mfrow = c(1,2))
myPNG("example_function2.png")
plot(x,y)
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
dev.off()
par(mfrow = c(1,1))
par(mfrow = c(1,2))
plot(x,y)
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
dev.off()
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
plot.new()
?dev.off()
dev.off()
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
mf <- par()$mfrow
mf
myPNG <- function(...) {
mf <- par()$mfrow
png(width = 7*mf[1], height = 7*mf[1], un = "in", res = 300, ...)
}
par(mfrow = c(1,2))
myPNG("example_function2.png")
plot(x,y)
plot(pok$Height_m, pok$Weight_kg, col = pok$Color, pch = as.numeric(pok$Form))
dev.off()
par(mfrow = c(1,1))
plot(x,y)
?png
png
?call
myPNG <- png(width = 7 * par()$mfrow[1],
height = 7 * par()$mfrow[2],
un = "in",
dpi = 300)
myPNG <- png(width = 7 * par()$mfrow[1],
height = 7 * par()$mfrow[2],
un = "in",
res = 300)
myPNG("example_function.png")
plot(x,y)
dev.off()
myPNG <- png(width = 7 * par()$mfrow[1],
height = 7 * par()$mfrow[2],
un = "in",
res = 300)
myPNG("example_function.png")
plot(x,y)
dev.off()
plot(x,y)
myPNG
myPNG <- png(width = 7 * par()$mfrow[1],
height = 7 * par()$mfrow[2],
un = "in",
res = 300)
myPNG <- call("png",
quote(res = 300))
myPNG <- call("png",
quote(res=300))
myPNG <- call(name = "png", res = 300)
myPNG <- call(name = "png", res = 300, width = 7, height = 7, un = "in")
myPNG("example_function.png")
plot(x,y)
dev.off()
dev.off()
myPNG
myPNG <- eval(parse(myPNG))
25+18
t.test(rt2_away$value)
t_away <- t.test(rt2_away$value)
str(t_away)
t_away <- t.test(rt2_away$value)
t_toward <- t.test(rt2_toward$value)
barplot(rt_means, names.arg = c("away", "toward"))
par(xpd=T)
?arrows
arrows(x0 = t_away[1], x1 = t_away[2], y1 = 0.7, y2 = 0.7, angle = 90, code = 3, width = .2)
arrows(x0 = t_away[1], x1 = t_away[2], y0 = 0.7, y1 = 0.7, angle = 90, code = 3, width = .2)
arrows(x0 = t_away[1], x1 = t_away[2], y0 = 0.7, y1 = 0.7, angle = 90, code = 3)
t_away <- t.test(rt2_away$value)$conf.int
t_toward <- t.test(rt2_toward$value)$conf.int
ci_away <- t.test(rt2_away$value)$conf.int
ci_toward <- t.test(rt2_toward$value)$conf.int
barplot(rt_means, names.arg = c("away", "toward"))
par(xpd=T)
arrows(x0 = ci_away[1], x1 = ci_away[2], y0 = 0.7, y1 = 0.7, angle = 90, code = 3)
arrows(x0 = 0.7, x1 = 0.7, y0 = ci_away[1], y1 = ci_away[2], angle = 90, code = 3)
arrows(x0 = 0.7, x1 = 0.7, y0 = ci_away[1], y1 = ci_away[2], angle = 90, code = 3, width = .2)
?arrows
arrows(x0 = 0.7, x1 = 0.7, y0 = ci_away[1], y1 = ci_away[2], angle = 90, code = 3, length = .2)
barplot(rt_means, names.arg = c("away", "toward"))
par(xpd=T)
arrows(x0 = 0.7, x1 = 0.7, y0 = ci_away[1], y1 = ci_away[2], angle = 90, code = 3, length = .2)
arrows(x0 = 1.9, x1 = 1.9, y0 = ci_toward[1], y1 = ci_toward[2], angle = 90, code = 3, length = .2)
barplot(c(100, 110), names.arg = c("boys", "girls"), ylab = "Score", main = "High school results")
barplot(c(100, 110), names.arg = c("boys", "girls"), ylab = "Score", main = "High school results",
ylim = c(90,120), xpd = F)
barplot(c(100, 110), names.arg = c("boys", "girls"), ylab = "Score", main = "High school results",
ylim = c(90,120), xpd = F)
barplot(c(100, 110), names.arg = c("boys", "girls"), ylab = "Score", main = "High school results",
ylim = c(90,110), xpd = F)
warnings()
barplot(rt_means, names.arg = c("away", "toward"))
par(xpd=T)
arrows(x0 = 0.7, x1 = 0.7, y0 = ci_away[1], y1 = ci_away[2], angle = 90, code = 3, length = .2)
arrows(x0 = 1.9, x1 = 1.9, y0 = ci_toward[1], y1 = ci_toward[2], angle = 90, code = 3, length = .2)
plot(c(1:10), c(1:10), type = "n")
arrows(x0 = 2, x1 = 4,y0 = 5, y1 = 5)
?arrows
arrows(x0 = 8, x1 = 8, y0 = 5, y1 = 9,
angle = 90,  # set angle to 90 degrees = flat arrow head
code = 3)    # draw arrow head on BOTH ends of the "arrow"
?loess
?scatter.smooth
scatter.smooth(x,y, main = "loess")
loess.smooth(x,y, main = "loess")
scatter.smooth(x,y, main = "loess")
lines(lowess(x, y))
?scatter.smooth
?lowess
?`slidify-package`
?slidifyDefaults
slidify::slidifyDefaults()
?par
thomas$TTR
plot(c(1:3), c(2.41, 3.51, 4.7), type = "b", pch=20)
plot(c(1:4), c(2.41, 3.51, 4.7, 2.5), type = "b", pch=20,)
plot(c(1:3), c(2.41, 3.51, 2.5), type = "b", pch=20,)
plot(c(1:3), c(2.41, 3.51, 2.9), type = "b", pch=20,)
plot(c(1:4), c(2.41, 3.51, 2.9, 3.1), type = "b", pch=20,)
plot(c(1:4), c(2.41, 3.51, 2.9, 3.1), type = "b", pch=20, xaxt="n")
axis(1, at = c(1:4), labels = c("Harry", "Gary", "Larry", "Jerry"))
thomas$age
plot(c(1:4), c(2.41, 3.51, 2.9, 3.1), type = "b", pch=20, xaxt="n",
xlab = "Child", ylab = "TTR", main = "Type-Token-Ratio of four 3-year-olds")
axis(1, at = c(1:4), labels = c("Harry", "Gary", "Larry", "Jerry"))
avengers <- read.csv("examples/avengers.csv")
avengers$
```
table(avengers$Character, avengers$Screentime)
as.matrix(avengers)
as.matrix(avengers$Screentime, ncol=2)
as.matrix(avengers$Screentime, ncol=3)
as.matrix(avengers$Screentime)
matrix(avengers$Screentime, ncol = 2)
matrix(avengers$Screentime, ncol = 2)
avengers_matrix <- matrix(avengers$Screentime, ncol = 2)
barplot(avengers_matrix, beside = T)
avengers_matrix <- matrix(avengers$Screentime, ncol = 3)
barplot(avengers_matrix, beside = T)
avengers_matrix
avengers_matrix <- matrix(avengers$Screentime, ncol = 3, byrow = T)
avengers_matrix
avengers_matrix <- matrix(avengers$Screentime, ncol = 3)
avengers_matrix
matrix(avengers$Screentime, ncol = 3)
matrix(avengers$Screentime, ncol = 2)
avengers[order(avengers$Character),]
# sort by character
avengers <- avengers[order(avengers$Character),]
matrix(avengers$Screentime, ncol = 2)
avengers_matrix <- matrix(avengers$Screentime, ncol = 2)
barplot(avengers_matrix, beside = T)
avengers_matrix <- matrix(avengers$Screentime, ncol = 3)
barplot(avengers_matrix, beside = T)
avengers_matrix <- matrix(avengers$Screentime, ncol = 3, byrow = T)
avengers_matrix
barplot(avengers_matrix, beside = T)
barplot(avengers_matrix, beside = T, legend.text = c("Iron Man", "Thor"))
barplot(avengers_matrix, beside = T, names.arg = c("Avengers 1", "Avengers 2", "Avengers 3"),
legend.text = c("Iron Man", "Thor"))
barplot(avengers)
table(avengers)
barplot(table(avengers))
avengers_matrix
matrix(avengers[order(avengers$Character),]$Screentime, ncol = 3, byrow = T)
matrix(avengers[order(avengers$Character),]$Screentime, ncol = 3, byrow = T,
dimnames = list(c("Iron Man", "Thor"), c("Avengers1", "Avengers2", "Avengers3")))
table(avengers)
table(avengers$Character, avengers$Film, avengers$Screentime)
table(avengers$Character~
avengers$Film, avengers$Screentime)
tidyr::gather(avengers)
tidyr::gather(avengers)
?matrix
# read in data
avengers <- read.csv("examples/avengers.csv")
matrix(avengers[order(avengers$Character),]$Screentime, ncol = 3, byrow = T,
dimnames = list(c("Iron Man", "Thor"), c("Avengers1", "Avengers2", "Avengers3")))
matrix(avengers$Screentime, ncol = 3)
matrix(avengers$Screentime, ncol = 3, byrow = T)
matrix(avengers$Screentime, nrow = 2, byrow = T)
matrix(avengers$Screentime, nrow = 2, byrow = F)
# plot
barplot(avengers_matrix, beside = T, names.arg = c("Avengers 1", "Avengers 2", "Avengers 3"),
legend.text = c("Iron Man", "Thor"))
plot(x,y, xpd = F)
plot(x,y, xpd = T)
plot(x, y, bg = "yellow")
plot(x, y, bg = "green")
par(bg = "green")
plot(x, y, bg = "green")
par(bg = "transparent")
plot(x, y, bg = "green")
dev.off()
dev.off()
plot(x, y)
avengers
exampleplot <- ggplot(avengers, aes(x = Film, y = Screentime, fill = Character)) +
geom_bar(position = "dodge")
exampleplot <- ggplot2::ggplot(avengers, aes(x = Film, y = Screentime, fill = Character)) +
geom_bar(position = "dodge")
library(ggplot2)
exampleplot <- ggplot(avengers, aes(x = Film, y = Screentime, fill = Character)) +
geom_bar(position = "dodge")
library(plotly)
ggplotly(exampleplot)
exampleplot <- ggplot(avengers, aes(x = Film, y = Screentime, fill = Character)) +
geom_col(position = "dodge")
ggplotly(exampleplot)
exampleplot <- ggplot(avengers, aes(x = Film, y = Screentime, fill = Character)) +
geom_col(position = "dodge") + theme_bw()
ggplotly(exampleplot)
?plot_ly
library(shiny)
renderUI({
plotOutput(
'Plot1',
brush = brushOpts(
id = 'Brush1'
),
dblclick = dblclickOpts(id = 'DblClick1'),
click = 'Click1'
)
})
library(shiny)
renderUI({
plotOutput(
'Plot1',
brush = brushOpts(
id = 'Brush1'
),
dblclick = dblclickOpts(id = 'DblClick1'),
click = 'Click1'
)
})
output[['Plot1']] <- renderPlot({
ggplot(avengers, aes(x = Film, y = Screentime, fill = Character)) + geom_col() + theme_bw()
})
htmlwidgets::saveWidget(exampleplot, "exampleplot.html", selfcontained = FALSE)
library(htmlwidgets)
saveWidget(exampleplot, "exampleplot.html", selfcontained = FALSE)
exampleplot
exampleplot2 <- ggplotly(exampleplot)
exampleplot2
saveWidget(exampleplot2, "exampleplot.html", selfcontained = FALSE)
?saveWidget
?knitr
saveWidget(exampleplot2, "exampleplot.html", selfcontained = FALSE, knitrOptions = list(fig.width = 7, fig.height = 7))
?saveW
?saveWidget
barplot(rt_means, names.arg = c("away", "toward"))
barplot(rt_means, names.arg = c("away", "toward"))
par(xpd=T)
arrows(x0 = 0.7, x1 = 0.7, y0 = ci_away[1], y1 = ci_away[2], angle = 90, code = 3, length = .2)
arrows(x0 = 1.9, x1 = 1.9, y0 = ci_toward[1], y1 = ci_toward[2], angle = 90, code = 3, length = .2)
?par
getwd()
